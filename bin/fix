#!/usr/bin/env php
<?php declare(strict_types=1);
/**
 * This file is part of morpho-os/framework
 * It is distributed under the 'Apache License Version 2.0' license.
 * See the https://github.com/njcom/framework/blob/main/LICENSE for the full license text.
 */
namespace Morpho\Infra;

use Generator;
use Morpho\Base\Err;
use Morpho\Base\NotImplementedException;
use Morpho\Base\Ok;
use Morpho\Base\Result;
use Morpho\Fs\Dir;
use Morpho\Tech\Php\CliPhpFileHeaderFixer;

use function Morpho\App\Cli\bootstrap;
use function Morpho\App\Cli\showErrorLine;
use function Morpho\Base\filter;

use const Morpho\App\BIN_DIR_NAME;
use const Morpho\App\CONF_DIR_NAME;
use const Morpho\App\LIB_DIR_NAME;
use const Morpho\App\TEST_DATA_DIR_NAME;
use const Morpho\App\TEST_DIR_NAME;
use const Morpho\Tech\Php\LICENSE_COMMENT;

require __DIR__ . '/../vendor/autoload.php';

bootstrap();

function fixFileHeaders(bool $dryRun): Result {
    $baseDirPath = __DIR__ . '/..';
    $baseNs = 'Morpho';

    $phpFilePaths = function (string $dirPath): Generator {
        return filter(function (string $filePath) {
            if (pathinfo($filePath, PATHINFO_EXTENSION) === 'php') {
                return true;
            }
            $fp = fopen($filePath, 'r');
            return (bool)preg_match('~^#!/usr/bin/env\s+php\b~si', fgets($fp));
        }, Dir::filePaths($dirPath, true));
    };

    $phpFilesInTestDir = function () {
        d();
        /*
        Dir::filePaths(
            $baseDirPath . '/' . TEST_DIR_NAME,
            fn($filePath) => str_ends_with($filePath, '.php')
                && !str_contains($filePath, '/' . TEST_DATA_DIR_NAME . '/')
                && !str_ends_with($filePath, '/' . TEST_DIR_NAME . '/Unit/Tech/Php/DebuggerTest.php'),
            true
        ),
        */
    };

    $conf = [
        [
            $phpFilePaths($baseDirPath . '/' . BIN_DIR_NAME),
            [
                'baseDirPath' => $baseDirPath . '/' . BIN_DIR_NAME,
                'ns'          => $baseNs . '\\Infra',
            ],
        ],
        [
            $phpFilePaths($baseDirPath . '/' . CONF_DIR_NAME),
            [
                'baseDirPath' => $baseDirPath . '/' . CONF_DIR_NAME,
                'ns'          => $baseNs . '\\App',
            ],
        ],
        [
            $phpFilePaths($baseDirPath . '/' . LIB_DIR_NAME),
            [
                'baseDirPath' => $baseDirPath . '/' . LIB_DIR_NAME,
                'ns'          => $baseNs,
                'shouldFix'   => function ($result) use ($baseNs, $baseDirPath) {
                    $context = $result->val();
                    if (realpath($context['filePath']) === realpath($baseDirPath . '/' . LIB_DIR_NAME . '/Tech/Php/autoload.php')) {
                        return !$context['hasValidDeclare'] || !$context['hasLicenseComment'] || $context['nsCheckResult'] != new Err(
                                ['expected' => $baseNs . '\\Tech\\Php', 'actual' => null]
                            );
                    }
                    return true;
                },
            ],
        ],
        [
            $phpFilesInTestDir(),
            [
                'baseDirPath' => $baseDirPath . '/' . TEST_DIR_NAME,
                'ns'          => $baseNs . '\\Test',
            ],
        ],
    ];
    return (new CliPhpFileHeaderFixer())->__invoke(
        [
            'files'         => $conf,
            'dryRun'        => $dryRun,
            'constructArgs' => LICENSE_COMMENT,
        ]
    );
}

function fixFormatting(bool $dryRun): Result {
    // todo: see #71
    //throw new NotImplementedException();
    return new Ok();
}

$dryRun = false;
if (fixFileHeaders($dryRun)->isOk()) {
    fixFormatting($dryRun);
} else {
    showErrorLine("Errors found!");
    exit(1);
}