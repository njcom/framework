#!/usr/bin/env php
<?php declare(strict_types=1);
/**
 * This file is part of morpho-os/framework
 * It is distributed under the 'Apache License Version 2.0' license.
 * See the https://github.com/njcom/framework/blob/main/LICENSE for the full license text.
 */
namespace Morpho\Infra;

use Morpho\Fs\Dir;

use Morpho\Fs\Path;
use Morpho\Tech\Php\FileReflection;

use function Morpho\App\Cli\showErrorLine;
use function Morpho\App\Cli\showLine;
use function Morpho\App\Cli\showOk;

require __DIR__ . '/../vendor/autoload.php';

function findEmptyClassTypes(): array {
    $result = [];
    $baseDirPath = realpath(__DIR__ . '/..');
    $fileIt = function () use ($baseDirPath): iterable {
        yield from Dir::filePaths($baseDirPath . '/lib', true);
        yield from Dir::filePaths($baseDirPath . '/test', true);
    };
    foreach ($fileIt() as $filePath) {
        $relPath = Path::rel($baseDirPath, $filePath);
        if (!str_ends_with($filePath, '.php') || str_contains($relPath, 'test-data') || str_starts_with($relPath, 'test/Manual')) {
            continue;
        }
        $code = file_get_contents($filePath);
        if (!preg_match('~(class|interface|trait|enum)~', $code) || $relPath == 'lib/Compiler/Frontend/Peg/PythonParserGenerator.php') {
            showLine('Skipped: ' . $filePath);
            $result['skipped'][] = $filePath;
            continue;
        }
        $fileR = new FileReflection($filePath);
        foreach ($fileR->namespaces() as $nsR) {
            foreach ($nsR->classTypes() as $classTypeR) {
                if (!$classTypeR->getConstants() && !$classTypeR->getMethods() && !$classTypeR->getProperties()) {
                    showErrorLine("Empty class type " . $classTypeR->getName() . " in file " . $filePath);
                    $result['empty'][] = $filePath;
                }
            }
        }
        /*
        foreach ($fileR->classes() as $classR) {
            d($classR);
        }
        foreach ($fileR->interfaces() as $ifaceR) {
            d($ifaceR);
        }
        foreach ($fileR->traits() as $traitR) {
            d($traitR);
        }
        foreach ($fileR->enums() as $enumR) {
            d($enumR);
        }
        */
    }
    return $result;
}

function main(): void {
    $result = findEmptyClassTypes();
    if (!empty($result['empty'])) {
        d($result['empty']);
    }
    showOk();
//    //passthru('cd ' . escapeshellarg($baseDirPath) . ' && ' . escapeshellarg($baseDirPath) . '/vendor/bin/psalm', $exitCode);
}

main();
